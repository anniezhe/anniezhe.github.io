diff --git a/node_modules/clsx/clsx.d.mts b/node_modules/clsx/clsx.d.mts
new file mode 100644
index 0000000..025bb7f
--- /dev/null
+++ b/node_modules/clsx/clsx.d.mts
@@ -0,0 +1,6 @@
+export type ClassValue = ClassArray | ClassDictionary | string | number | bigint | null | boolean | undefined;
+export type ClassDictionary = Record<string, any>;
+export type ClassArray = ClassValue[];
+
+export function clsx(...inputs: ClassValue[]): string;
+export default clsx;
diff --git a/node_modules/clsx/clsx.d.ts b/node_modules/clsx/clsx.d.ts
index f557360..a4233f5 100644
--- a/node_modules/clsx/clsx.d.ts
+++ b/node_modules/clsx/clsx.d.ts
@@ -1,6 +1,10 @@
-export type ClassValue = ClassArray | ClassDictionary | string | number | null | boolean | undefined;
-export type ClassDictionary = Record<string, any>;
-export type ClassArray = ClassValue[];
+declare namespace clsx {
+	type ClassValue = ClassArray | ClassDictionary | string | number | bigint | null | boolean | undefined;
+	type ClassDictionary = Record<string, any>;
+	type ClassArray = ClassValue[];
+	function clsx(...inputs: ClassValue[]): string;
+}
 
-export declare function clsx(...inputs: ClassValue[]): string;
-export default clsx;
+declare function clsx(...inputs: clsx.ClassValue[]): string;
+
+export = clsx;
diff --git a/node_modules/clsx/dist/clsx.js b/node_modules/clsx/dist/clsx.js
index 2090f74..c3dee97 100644
--- a/node_modules/clsx/dist/clsx.js
+++ b/node_modules/clsx/dist/clsx.js
@@ -1 +1 @@
-function e(r){var o,t,f="";if("string"==typeof r||"number"==typeof r)f+=r;else if("object"==typeof r)if(Array.isArray(r))for(o=0;o<r.length;o++)r[o]&&(t=e(r[o]))&&(f&&(f+=" "),f+=t);else for(o in r)r[o]&&(f&&(f+=" "),f+=o);return f}function r(){for(var r,o,t=0,f="";t<arguments.length;)(r=arguments[t++])&&(o=e(r))&&(f&&(f+=" "),f+=o);return f}module.exports=r,module.exports.clsx=r;
\ No newline at end of file
+function r(e) { var o, t, f = ""; if ("string" == typeof e || "number" == typeof e) f += e; else if ("object" == typeof e) if (Array.isArray(e)) { var n = e.length; for (o = 0; o < n; o++)e[o] && (t = r(e[o])) && (f && (f += " "), f += t) } else for (t in e) e[t] && (f && (f += " "), f += t); return f } function e() { for (var e, o, t = 0, f = "", n = arguments.length; t < n; t++)(e = arguments[t]) && (o = r(e)) && (f && (f += " "), f += o); return f } module.exports = e, module.exports.clsx = e;
\ No newline at end of file
diff --git a/node_modules/clsx/dist/clsx.m.js b/node_modules/clsx/dist/clsx.m.js
deleted file mode 100644
index e29eb66..0000000
--- a/node_modules/clsx/dist/clsx.m.js
+++ /dev/null
@@ -1 +0,0 @@
-function r(e){var t,f,n="";if("string"==typeof e||"number"==typeof e)n+=e;else if("object"==typeof e)if(Array.isArray(e))for(t=0;t<e.length;t++)e[t]&&(f=r(e[t]))&&(n&&(n+=" "),n+=f);else for(t in e)e[t]&&(n&&(n+=" "),n+=t);return n}export function clsx(){for(var e,t,f=0,n="";f<arguments.length;)(e=arguments[f++])&&(t=r(e))&&(n&&(n+=" "),n+=t);return n}export default clsx;
\ No newline at end of file
diff --git a/node_modules/clsx/dist/clsx.min.js b/node_modules/clsx/dist/clsx.min.js
index 9d1a39f..5448c6e 100644
--- a/node_modules/clsx/dist/clsx.min.js
+++ b/node_modules/clsx/dist/clsx.min.js
@@ -1 +1 @@
-!function(e,n){"object"==typeof exports&&"undefined"!=typeof module?module.exports=n():"function"==typeof define&&define.amd?define(n):e.clsx=n()}(this,(function(){function e(n){var t,f,o="";if("string"==typeof n||"number"==typeof n)o+=n;else if("object"==typeof n)if(Array.isArray(n))for(t=0;t<n.length;t++)n[t]&&(f=e(n[t]))&&(o&&(o+=" "),o+=f);else for(t in n)n[t]&&(o&&(o+=" "),o+=t);return o}function n(){for(var n,t,f=0,o="";f<arguments.length;)(n=arguments[f++])&&(t=e(n))&&(o&&(o+=" "),o+=t);return o}return n.clsx=n,n}));
\ No newline at end of file
+!function(e,n){"object"==typeof exports&&"undefined"!=typeof module?module.exports=n():"function"==typeof define&&define.amd?define(n):e.clsx=n()}(this,(function(){function e(n){var t,f,o="";if("string"==typeof n||"number"==typeof n)o+=n;else if("object"==typeof n)if(Array.isArray(n)){var r=n.length;for(t=0;t<r;t++)n[t]&&(f=e(n[t]))&&(o&&(o+=" "),o+=f)}else for(f in n)n[f]&&(o&&(o+=" "),o+=f);return o}function n(){for(var n,t,f=0,o="",r=arguments.length;f<r;f++)(n=arguments[f])&&(t=e(n))&&(o&&(o+=" "),o+=t);return o}return n.clsx=n,n}));
\ No newline at end of file
diff --git a/node_modules/clsx/dist/clsx.mjs b/node_modules/clsx/dist/clsx.mjs
new file mode 100644
index 0000000..b98071e
--- /dev/null
+++ b/node_modules/clsx/dist/clsx.mjs
@@ -0,0 +1 @@
+function r(e){var t,f,n="";if("string"==typeof e||"number"==typeof e)n+=e;else if("object"==typeof e)if(Array.isArray(e)){var o=e.length;for(t=0;t<o;t++)e[t]&&(f=r(e[t]))&&(n&&(n+=" "),n+=f)}else for(f in e)e[f]&&(n&&(n+=" "),n+=f);return n}export function clsx(){for(var e,t,f=0,n="",o=arguments.length;f<o;f++)(e=arguments[f])&&(t=r(e))&&(n&&(n+=" "),n+=t);return n}export default clsx;
\ No newline at end of file
diff --git a/node_modules/clsx/dist/lite.js b/node_modules/clsx/dist/lite.js
new file mode 100644
index 0000000..ed521bb
--- /dev/null
+++ b/node_modules/clsx/dist/lite.js
@@ -0,0 +1 @@
+function e(){for(var e,o=0,r="",t=arguments.length;o<t;o++)(e=arguments[o])&&"string"==typeof e&&(r+=(r&&" ")+e);return r}module.exports=e,module.exports.clsx=e;
\ No newline at end of file
diff --git a/node_modules/clsx/dist/lite.mjs b/node_modules/clsx/dist/lite.mjs
new file mode 100644
index 0000000..76fe069
--- /dev/null
+++ b/node_modules/clsx/dist/lite.mjs
@@ -0,0 +1 @@
+export function clsx(){for(var t,r=0,e="",n=arguments.length;r<n;r++)(t=arguments[r])&&"string"==typeof t&&(e+=(e&&" ")+t);return e}export default clsx;
\ No newline at end of file
diff --git a/node_modules/clsx/readme.md b/node_modules/clsx/readme.md
index cba8d87..b1af2b3 100644
--- a/node_modules/clsx/readme.md
+++ b/node_modules/clsx/readme.md
@@ -1,10 +1,10 @@
-# clsx [![CI](https://github.com/lukeed/clsx/workflows/CI/badge.svg)](https://github.com/lukeed/clsx/actions?query=workflow%3ACI) [![codecov](https://badgen.net/codecov/c/github/lukeed/clsx)](https://codecov.io/gh/lukeed/clsx)
+# clsx [![CI](https://github.com/lukeed/clsx/workflows/CI/badge.svg)](https://github.com/lukeed/clsx/actions?query=workflow%3ACI) [![codecov](https://badgen.net/codecov/c/github/lukeed/clsx)](https://codecov.io/gh/lukeed/clsx) [![licenses](https://licenses.dev/b/npm/clsx)](https://licenses.dev/npm/clsx)
 
-> A tiny (228B) utility for constructing `className` strings conditionally.<Br>Also serves as a [faster](/bench) & smaller drop-in replacement for the `classnames` module.
+> A tiny (239B) utility for constructing `className` strings conditionally.<Br>Also serves as a [faster](bench) & smaller drop-in replacement for the `classnames` module.
 
 This module is available in three formats:
 
-* **ES Module**: `dist/clsx.m.js`
+* **ES Module**: `dist/clsx.mjs`
 * **CommonJS**: `dist/clsx.js`
 * **UMD**: `dist/clsx.min.js`
 
@@ -66,9 +66,48 @@ clsx(true, false, '', null, undefined, 0, NaN);
 //=> ''
 ```
 
+## Modes
+
+There are multiple "versions" of `clsx` available, which allows you to bring only the functionality you need!
+
+#### `clsx`
+> **Size (gzip):** 239 bytes<br>
+> **Availability:** CommonJS, ES Module, UMD
+
+The default `clsx` module; see [API](#API) for info.
+
+```js
+import { clsx } from 'clsx';
+// or
+import clsx from 'clsx';
+```
+
+#### `clsx/lite`
+> **Size (gzip):** 140 bytes<br>
+> **Availability:** CommonJS, ES Module<br>
+> **CAUTION:** Accepts **ONLY** string arguments!
+
+Ideal for applications that ***only*** use the string-builder pattern.
+
+Any non-string arguments are ignored!
+
+```js
+import { clsx } from 'clsx/lite';
+// or
+import clsx from 'clsx/lite';
+
+// string
+clsx('hello', true && 'foo', false && 'bar');
+// => "hello foo"
+
+// NOTE: Any non-string input(s) ignored
+clsx({ foo: true });
+//=> ""
+```
+
 ## Benchmarks
 
-For snapshots of cross-browser results, check out the [`bench`](/bench) directory~!
+For snapshots of cross-browser results, check out the [`bench`](bench) directory~!
 
 ## Support
 
@@ -78,6 +117,33 @@ All browsers that support [`Array.isArray`](https://developer.mozilla.org/en-US/
 
 >**Note:** For IE8 support and older, please install `clsx@1.0.x` and beware of [#17](https://github.com/lukeed/clsx/issues/17).
 
+## Tailwind Support
+
+Here some additional (optional) steps to enable classes autocompletion using `clsx` with Tailwind CSS.
+
+<details>
+<summary>
+  Visual Studio Code
+</summary>
+
+1. [Install the "Tailwind CSS IntelliSense" Visual Studio Code extension](https://marketplace.visualstudio.com/items?itemName=bradlc.vscode-tailwindcss)
+
+2. Add the following to your [`settings.json`](https://code.visualstudio.com/docs/getstarted/settings):
+
+  ```json
+   {
+    "tailwindCSS.experimental.classRegex": [
+      ["clsx\\(([^)]*)\\)", "(?:'|\"|`)([^']*)(?:'|\"|`)"]
+    ]
+   }
+  ```
+</details>
+
+You may find the [`clsx/lite`](#clsxlite) module useful within Tailwind contexts. This is especially true if/when your application **only** composes classes in this pattern:
+
+```js
+clsx('text-base', props.active && 'text-primary', props.className);
+```
 
 ## Related
 
